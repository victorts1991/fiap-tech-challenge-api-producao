// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fiap-tech-challenge-producao/internal/adapters/http"
	"fiap-tech-challenge-producao/internal/adapters/http/handlers"
	repository2 "fiap-tech-challenge-producao/internal/adapters/repository"
	"fiap-tech-challenge-producao/internal/core/usecase"
	"github.com/rhuandantas/fiap-tech-challenge-commons/pkg/db/mysql"
	"github.com/rhuandantas/fiap-tech-challenge-commons/pkg/middlewares/auth"
	"github.com/rhuandantas/fiap-tech-challenge-commons/pkg/util"
)

// Injectors from wire.go:

func InitializeWebServer() (*http.Server, error) {
	healthCheck := handlers.NewHealthCheck()
	validator := util.NewCustomValidator()
	dbConnector := repository.NewMySQLConnector()
	filaRepo := repository2.NewFilaRepo(dbConnector)
	pegaPedidoPorID := usecase.NewPegaPedidoPorID(filaRepo)
	atualizaStatusProducao := usecase.NewAtualizaStatusProducaoUC(filaRepo)
	cadastrarFila := usecase.NewCadastraFila(filaRepo)
	token := auth.NewJwtToken()
	producao := handlers.NewProducao(validator, pegaPedidoPorID, atualizaStatusProducao, cadastrarFila, token)
	server := http.NewAPIServer(healthCheck, producao)
	return server, nil
}
