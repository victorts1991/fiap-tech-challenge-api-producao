// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go
//
// Generated by this command:
//
//	mockgen -source=jwt.go -package=mock_auth -destination=../../../../test/mock/auth/jwt.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	v4 "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockToken is a mock of Token interface.
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken.
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance.
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockToken) GenerateToken(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenMockRecorder) GenerateToken(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockToken)(nil).GenerateToken), email)
}

// VerifyToken mocks base method.
func (m *MockToken) VerifyToken(next v4.HandlerFunc) v4.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", next)
	ret0, _ := ret[0].(v4.HandlerFunc)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenMockRecorder) VerifyToken(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockToken)(nil).VerifyToken), next)
}
