// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/repository/producao.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/repository/producao.go -package=mock_repo -destination=test/mock/repository/producao.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	domain "fiap-tech-challenge-producao/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilaRepo is a mock of FilaRepo interface.
type MockFilaRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFilaRepoMockRecorder
}

// MockFilaRepoMockRecorder is the mock recorder for MockFilaRepo.
type MockFilaRepoMockRecorder struct {
	mock *MockFilaRepo
}

// NewMockFilaRepo creates a new mock instance.
func NewMockFilaRepo(ctrl *gomock.Controller) *MockFilaRepo {
	mock := &MockFilaRepo{ctrl: ctrl}
	mock.recorder = &MockFilaRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilaRepo) EXPECT() *MockFilaRepoMockRecorder {
	return m.recorder
}

// AtualizaStatus mocks base method.
func (m *MockFilaRepo) AtualizaStatus(ctx context.Context, status, pedidoId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtualizaStatus", ctx, status, pedidoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtualizaStatus indicates an expected call of AtualizaStatus.
func (mr *MockFilaRepoMockRecorder) AtualizaStatus(ctx, status, pedidoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtualizaStatus", reflect.TypeOf((*MockFilaRepo)(nil).AtualizaStatus), ctx, status, pedidoId)
}

// Insere mocks base method.
func (m *MockFilaRepo) Insere(ctx context.Context, fila *domain.Producao) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insere", ctx, fila)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insere indicates an expected call of Insere.
func (mr *MockFilaRepoMockRecorder) Insere(ctx, fila any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insere", reflect.TypeOf((*MockFilaRepo)(nil).Insere), ctx, fila)
}

// PegaPedidoPorID mocks base method.
func (m *MockFilaRepo) PegaPedidoPorID(ctx context.Context, pedidoId string) (*domain.Producao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PegaPedidoPorID", ctx, pedidoId)
	ret0, _ := ret[0].(*domain.Producao)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PegaPedidoPorID indicates an expected call of PegaPedidoPorID.
func (mr *MockFilaRepoMockRecorder) PegaPedidoPorID(ctx, pedidoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PegaPedidoPorID", reflect.TypeOf((*MockFilaRepo)(nil).PegaPedidoPorID), ctx, pedidoId)
}
